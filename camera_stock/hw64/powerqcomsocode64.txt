//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
// Copyright (c) 2017 Retargetable Decompiler <info@retdec.com>
//

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>

// ------------------- Function Prototypes --------------------

int32_t fib(int32_t a1);

// --------------------- Global Variables ---------------------

int32_t g1 = 0; // R4
int32_t g2 = 0; // R5

// ------------------------ Functions -------------------------

// Address range: 0x8440 - 0x84d3
int main(int argc, char ** argv) {
    int32_t v1 = 0; // bp-24
    int32_t v2 = 0; // bp-20
    printf("Input the number of iterations: ");
    scanf("%d", &v1);
    if (v1 < 1) {
        // 0x84b8
        return 0;
    }
    // 0x8474
    g1 = 1;
    printf("Input a number: ");
    scanf("%d", &v2);
    g2 = v2;
    g1++;
    int32_t v3 = fib(v2); // 0x8498
    printf("fib(%d) = %u\n", g2, v3);
    // branch -> 0x8478
    while (v1 >= g1) {
        // 0x8478
        printf("Input a number: ");
        scanf("%d", &v2);
        g2 = v2;
        g1++;
        v3 = fib(v2);
        printf("fib(%d) = %u\n", g2, v3);
        // continue -> 0x8478
    }
    // 0x84b8
    return 0;
}

// Address range: 0x8608 - 0x886f
int32_t fib(int32_t a1) {
    int32_t v1 = g1; // 0x860c
    int32_t v2 = g2; // 0x860c
    if (a1 < 3) {
        // 0x8834
        g1 = v1;
        g2 = v2;
        return 1;
    }
    int32_t v3 = 0; // 0x881c8
    int32_t v4; // 0x881c
    while (true) {
        int32_t v5 = a1 - 2; // 0x8808
        int32_t v6 = 1; // 0x881c
        if (a1 >= 4) {
            int32_t v7 = v5; // 0x884814
            int32_t v8 = 0; // 0x88589
            // branch -> 0x8648
            int32_t v9; // 0x8858
            while (true) {
                int32_t v10 = v7 - 2; // 0x864c
                int32_t v11 = 1;
                if (v7 >= 3) {
                    int32_t v12 = v7; // 0x87f8
                    int32_t v13 = 0; // 0x87b410
                    int32_t v14; // 0x87b4
                    while (true) {
                        int32_t v15 = v12 - 2; // 0x87f8
                        int32_t v16 = 1;
                        if (v12 >= 4) {
                            int32_t v17 = v15; // 0x8790
                            int32_t v18 = 0; // 0x879c11
                            // branch -> 0x8688
                            int32_t v19; // 0x8794
                            while (true) {
                                int32_t v20 = v17 - 2; // 0x8688
                                int32_t v21 = 1;
                                if (v17 != 2 && !((v20 < 0 ^ (1 - v17 & v17) < 0))) {
                                    int32_t v22 = v17; // 0x87e0
                                    int32_t v23 = 0; // 0x877412
                                    int32_t v24; // 0x8774
                                    while (true) {
                                        int32_t v25 = v22 - 2; // 0x87e0
                                        int32_t v26 = 1;
                                        if (v22 >= 4) {
                                            int32_t v27 = v25; // R9
                                            int32_t v28 = v25; // 0x86cc
                                            int32_t v29 = 0; // 0x875c13
                                            // branch -> 0x86c8
                                            int32_t v30; // 0x8754
                                            while (true) {
                                                int32_t v31 = v28; // 0x8750
                                                int32_t v32 = 1;
                                                if (v28 != 2 && !((v28 < 2 ^ (1 - v28 & v28) < 0))) {
                                                    int32_t v33 = 0; // R10
                                                    int32_t v34 = 0; // 0x873c29
                                                    int32_t v35 = v28; // 0x86e8
                                                    // branch -> 0x86d8
                                                    int32_t v36; // 0x873c
                                                    while (true) {
                                                        int32_t v37 = v35 - 2; // 0x86e0
                                                        int32_t v38 = v34; // 0x873c
                                                        int32_t v39 = 1;
                                                        if (v35 >= 4) {
                                                            int32_t v40 = v35 % 2; // 0x86e8
                                                            int32_t v41 = 0; // R7
                                                            int32_t v42 = 0; // 0x872827
                                                            // branch -> 0x86f4
                                                            int32_t v43; // 0x8728
                                                            while (true) {
                                                                // 0x86f4
                                                                g1 = v37;
                                                                int32_t v44 = v42; // 0x8728
                                                                int32_t v45 = v40; // 0x8724
                                                                int32_t v46 = 1;
                                                                if (v37 != 2 && !((v37 < 2 ^ (1 - v37 & v37) < 0))) {
                                                                    // 0x8700
                                                                    g2 = 0;
                                                                    int32_t v47 = fib(v37 - 1); // 0x8708
                                                                    int32_t v48 = g1 - 2; // 0x870c
                                                                    g1 = v48;
                                                                    int32_t v49 = g2 + v47; // 0x8714
                                                                    g2 = v49;
                                                                    // branch -> 0x8704
                                                                    while (v48 > 2) {
                                                                        // 0x8704
                                                                        v47 = fib(v48 - 1);
                                                                        v48 = g1 - 2;
                                                                        g1 = v48;
                                                                        v49 = g2 + v47;
                                                                        g2 = v49;
                                                                        // continue -> 0x8704
                                                                    }
                                                                    // 0x871c
                                                                    v44 = v41;
                                                                    v45 = v40;
                                                                    v46 = v49 + 1;
                                                                    // branch -> 0x8720
                                                                }
                                                                int32_t v50 = v37 - 2; // 0x8720
                                                                v37 = v50;
                                                                v43 = v46 + v44;
                                                                v41 = v43;
                                                                if (v50 == v45) {
                                                                    // break -> 0x8730
                                                                    break;
                                                                }
                                                                v42 = v43;
                                                                v40 = v45;
                                                                v37 = v50;
                                                                // continue -> 0x86f4
                                                            }
                                                            // 0x8730
                                                            v38 = v33;
                                                            v39 = v43 + 1;
                                                            // branch -> 0x8734
                                                        }
                                                        // 0x8734
                                                        v36 = v39 + v38;
                                                        v33 = v36;
                                                        if (v37 <= 2) {
                                                            // break -> 0x8744
                                                            break;
                                                        }
                                                        v34 = v36;
                                                        v35 = v37;
                                                        // continue -> 0x86d8
                                                    }
                                                    // 0x8744
                                                    v31 = v27;
                                                    v32 = v36 + 1;
                                                    // branch -> 0x8748
                                                }
                                                int32_t v51 = v31 - 2; // 0x8750
                                                v27 = v51;
                                                v30 = v32 + v29;
                                                if (v51 == v22 % 2) {
                                                    // break -> 0x8764
                                                    break;
                                                }
                                                v28 = v51;
                                                v29 = v30;
                                                // continue -> 0x86c8
                                            }
                                            // 0x8764
                                            v26 = v30 + 1;
                                            // branch -> 0x876c
                                        }
                                        // 0x876c
                                        v24 = v26 + v23;
                                        if (v25 == 2 || v22 < 4 ^ (3 - v22 & v25) < 0) {
                                            // break -> 0x8780
                                            break;
                                        }
                                        v22 = v25;
                                        v23 = v24;
                                        // continue -> 0x86a0
                                    }
                                    // 0x8780
                                    v21 = v24 + 1;
                                    // branch -> 0x8788
                                }
                                // 0x8788
                                v19 = v21 + v18;
                                if (v20 == v12 % 2) {
                                    // break -> 0x87a4
                                    break;
                                }
                                v17 = v20;
                                v18 = v19;
                                // continue -> 0x8688
                            }
                            // 0x87a4
                            v16 = v19 + 1;
                            // branch -> 0x87ac
                        }
                        // 0x87ac
                        v14 = v16 + v13;
                        if (v15 == 2 || v12 < 4 ^ (3 - v12 & v15) < 0) {
                            // break -> 0x87c0
                            break;
                        }
                        v12 = v15;
                        v13 = v14;
                        // continue -> 0x8660
                    }
                    // 0x87c0
                    v11 = v14 + 1;
                    // branch -> 0x8840
                }
                // 0x8840
                v9 = v11 + v8;
                if (v10 == a1 % 2) {
                    // break -> 0x8864
                    break;
                }
                v7 = v10;
                v8 = v9;
                // continue -> 0x8648
            }
            // 0x8864
            v6 = v9 + 1;
            // branch -> 0x8814
        }
        // 0x8814
        v4 = v6 + v3;
        if (v5 <= 2) {
            // break -> 0x8828
            break;
        }
        a1 = v5;
        v3 = v4;
        // continue -> 0x8620
    }
    // 0x8828
    // branch -> 0x8834
    // 0x8834
    g1 = v1;
    g2 = v2;
    return v4 + 1;
}

// --------------- Dynamically Linked Functions ---------------

// int printf(const char * restrict format, ...);
// int scanf(const char * restrict format, ...);

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: gcc (4.8.3)
// Detected functions: 2
// Decompiler release: v2.2.1 (2016-09-07)
// Decompilation date: 2017-10-09 22:26:58
